{"version":3,"sources":["../src/server.ts","../src/sdk/index.ts","../src/sdk/utils.ts"],"sourcesContent":["import { getStatusCodeFromError, UploadThingError } from \"@uploadthing/shared\";\nimport type { Json } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"./constants\";\nimport { formatError } from \"./internal/error-formatter\";\nimport type { RouterWithConfig } from \"./internal/handler\";\nimport {\n  buildPermissionsInfoHandler,\n  buildRequestHandler,\n} from \"./internal/handler\";\nimport type { FileRouter } from \"./internal/types\";\nimport type { CreateBuilderOptions } from \"./internal/upload-builder\";\nimport { createBuilder } from \"./internal/upload-builder\";\n\nexport * from \"./internal/types\";\nexport * as utapi from \"./sdk\";\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) => createBuilder<{ req: Request; res: undefined }, TErrorShape>(opts);\n\nexport const createServerHandler = <TRouter extends FileRouter>(\n  opts: RouterWithConfig<TRouter>,\n) => {\n  const requestHandler = buildRequestHandler<TRouter>(opts);\n\n  const POST = async (request: Request | { request: Request }) => {\n    const req = request instanceof Request ? request : request.request;\n    const response = await requestHandler({ req });\n\n    if (response instanceof UploadThingError) {\n      return new Response(JSON.stringify(formatError(response, opts.router)), {\n        status: getStatusCodeFromError(response),\n        headers: {\n          \"x-uploadthing-version\": UPLOADTHING_VERSION,\n        },\n      });\n    }\n    if (response.status !== 200) {\n      // We messed up - this should never happen\n      return new Response(\"An unknown error occured\", {\n        status: 500,\n        headers: {\n          \"x-uploadthing-version\": UPLOADTHING_VERSION,\n        },\n      });\n    }\n\n    return new Response(JSON.stringify(response.body), {\n      status: response.status,\n      headers: {\n        \"x-uploadthing-version\": UPLOADTHING_VERSION,\n      },\n    });\n  };\n\n  const getBuildPerms = buildPermissionsInfoHandler<TRouter>(opts);\n\n  const GET = (request: Request | { request: Request }) => {\n    const _req = request instanceof Request ? request : request.request;\n\n    return new Response(JSON.stringify(getBuildPerms()), {\n      status: 200,\n      headers: {\n        \"x-uploadthing-version\": UPLOADTHING_VERSION,\n      },\n    });\n  };\n\n  return { GET, POST };\n};\n\nexport const extractRouterConfig = (router: FileRouter) =>\n  buildPermissionsInfoHandler({ router })();\n","import type { Json } from \"@uploadthing/shared\";\nimport { generateUploadThingURL, UploadThingError } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"../constants\";\nimport type { FileEsque, UploadData, UploadError } from \"./utils\";\nimport { uploadFilesInternal } from \"./utils\";\n\nfunction guardServerOnly() {\n  if (typeof window !== \"undefined\") {\n    throw new UploadThingError({\n      code: \"INTERNAL_SERVER_ERROR\",\n      message: \"The `utapi` can only be used on the server.\",\n    });\n  }\n}\n\nfunction getApiKeyOrThrow() {\n  if (!process.env.UPLOADTHING_SECRET) {\n    throw new UploadThingError({\n      code: \"MISSING_ENV\",\n      message: \"Missing `UPLOADTHING_SECRET` env variable.\",\n    });\n  }\n  return process.env.UPLOADTHING_SECRET;\n}\n\ntype UploadFileResponse =\n  | { data: UploadData; error: null }\n  | { data: null; error: UploadError };\n\n/**\n * @param {FileEsque | FileEsque[]} files The file(s) to upload\n * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n *\n * @example\n * await uploadFiles(new File([\"foo\"], \"foo.txt\"));\n *\n * @example\n * await uploadFiles([\n *   new File([\"foo\"], \"foo.txt\"),\n *   new File([\"bar\"], \"bar.txt\"),\n * ]);\n */\nexport const uploadFiles = async <T extends FileEsque | FileEsque[]>(\n  files: T,\n  metadata: Json = {},\n) => {\n  guardServerOnly();\n\n  const filesToUpload: FileEsque[] = Array.isArray(files) ? files : [files];\n\n  const uploads = await uploadFilesInternal(\n    {\n      files: filesToUpload,\n      metadata,\n    },\n    {\n      apiKey: getApiKeyOrThrow(),\n      utVersion: UPLOADTHING_VERSION,\n    },\n  );\n\n  const uploadFileResponse = Array.isArray(files) ? uploads : uploads[0];\n\n  return uploadFileResponse as T extends FileEsque[]\n    ? UploadFileResponse[]\n    : UploadFileResponse;\n};\n\n/**\n * @param {string} url The URL of the file to upload\n * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n *\n * @example\n * await uploadFileFromUrl(\"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n *\n * @example\n * await uploadFileFromUrl([\n *   \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n *   \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"\n * ])\n */\ntype Url = string | URL;\nexport const uploadFilesFromUrl = async <T extends Url | Url[]>(\n  urls: T,\n  metadata: Json = {},\n) => {\n  guardServerOnly();\n\n  const fileUrls: Url[] = Array.isArray(urls) ? urls : [urls];\n\n  const formData = new FormData();\n  formData.append(\"metadata\", JSON.stringify(metadata));\n\n  const filesToUpload = await Promise.all(\n    fileUrls.map(async (url) => {\n      if (typeof url === \"string\") url = new URL(url);\n      const filename = url.pathname.split(\"/\").pop() ?? \"unknown-filename\";\n\n      // Download the file on the user's server to avoid egress charges\n      const fileResponse = await fetch(url);\n      if (!fileResponse.ok) {\n        throw new UploadThingError({\n          code: \"BAD_REQUEST\",\n          message: \"Failed to download requested file.\",\n          cause: fileResponse,\n        });\n      }\n      const blob = await fileResponse.blob();\n      return Object.assign(blob, { name: filename });\n    }),\n  );\n\n  const uploads = await uploadFilesInternal(\n    {\n      files: filesToUpload,\n      metadata,\n    },\n    {\n      apiKey: getApiKeyOrThrow(),\n      utVersion: UPLOADTHING_VERSION,\n    },\n  );\n\n  const uploadFileResponse = Array.isArray(urls) ? uploads : uploads[0];\n\n  return uploadFileResponse as T extends Url[]\n    ? UploadFileResponse[]\n    : UploadFileResponse;\n};\n\n/**\n * Request to delete files from UploadThing storage.\n * @param {string | string[]} fileKeys\n *\n * @example\n * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n *\n * @example\n * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n */\nexport const deleteFiles = async (fileKeys: string[] | string) => {\n  guardServerOnly();\n\n  if (!Array.isArray(fileKeys)) fileKeys = [fileKeys];\n\n  const res = await fetch(generateUploadThingURL(\"/api/deleteFile\"), {\n    method: \"POST\",\n    cache: \"no-store\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": getApiKeyOrThrow(),\n      \"x-uploadthing-version\": UPLOADTHING_VERSION,\n    },\n    body: JSON.stringify({ fileKeys }),\n  });\n\n  if (!res.ok) {\n    throw new Error(\"Failed to delete files\");\n  }\n\n  return res.json() as Promise<{ success: boolean }>;\n};\n\n/**\n * Request file URLs from UploadThing storage.\n * @param {string | string[]} fileKeys\n *\n * @example\n * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n *\n * @example\n * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n */\nexport const getFileUrls = async (fileKeys: string[] | string) => {\n  guardServerOnly();\n\n  if (!Array.isArray(fileKeys)) fileKeys = [fileKeys];\n\n  const res = await fetch(generateUploadThingURL(\"/api/getFileUrl\"), {\n    method: \"POST\",\n    cache: \"no-store\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": getApiKeyOrThrow(),\n      \"x-uploadthing-version\": UPLOADTHING_VERSION,\n    },\n    body: JSON.stringify({ fileKeys }),\n  });\n\n  if (!res.ok) {\n    throw new Error(\"Failed to get file urls\");\n  }\n\n  return res.json().then(({ data }) => data as { key: string; url: string }[]);\n};\n\n/**\n * Request file list from UploadThing storage.\n *\n * @example\n * const data = await listFiles();\n * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n */\nexport const listFiles = async () => {\n  guardServerOnly();\n\n  // TODO: Implement filtering and pagination\n  const res = await fetch(generateUploadThingURL(\"/api/listFiles\"), {\n    method: \"POST\",\n    cache: \"no-store\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": getApiKeyOrThrow(),\n      \"x-uploadthing-version\": UPLOADTHING_VERSION,\n    },\n  });\n\n  const json = (await res.json()) as\n    | { files: { key: string; id: string }[] }\n    | { error: string };\n\n  if (!res.ok || \"error\" in json) {\n    const message = \"error\" in json ? json.error : \"Unknown error\";\n    throw new Error(message);\n  }\n\n  return json.files;\n};\n\n/**\n * Rename a file in UploadThing storage.\n *\n * type Rename = {\n *   fileKey: string;\n *   newName: string; // Should include file extension\n * };\n *\n * @param {Rename | Rename[]} updates\n *\n * @example\n * await renameFile({ fileKey: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", newName: \"new_image.jpg\" });\n *\n * @example\n * await renameFile([{ fileKey: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", newName: \"new_image.jpg\" }, { fileKey: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", newName: \"new_image2.jpg\" }]);\n *\n */\n\ntype Rename = {\n  fileKey: string;\n  newName: string;\n};\n\nexport const renameFile = async (updates: Rename | Rename[]) => {\n  guardServerOnly();\n\n  if (!Array.isArray(updates)) updates = [updates];\n\n  const res = await fetch(generateUploadThingURL(\"/api/renameFile\"), {\n    method: \"POST\",\n    cache: \"no-store\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": getApiKeyOrThrow(),\n      \"x-uploadthing-version\": UPLOADTHING_VERSION,\n    },\n    body: JSON.stringify({ updates }),\n  });\n\n  const json = (await res.json()) as { success: true } | { error: string };\n\n  if (!res.ok || \"error\" in json) {\n    const message = \"error\" in json ? json.error : \"Unknown error\";\n    throw new Error(message);\n  }\n\n  return json;\n};\n","import type { File as UndiciFile } from \"undici\";\n\nimport type { Json } from \"@uploadthing/shared\";\nimport {\n  generateUploadThingURL,\n  pollForFileData,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport { maybeParseResponseXML } from \"../internal/s3-error-parser\";\n\nexport type FileEsque = (Blob & { name: string }) | UndiciFile;\n\nexport type UploadData = {\n  key: string;\n  url: string;\n  name: string;\n  size: number;\n};\n\nexport type UploadError = {\n  code: string;\n  message: string;\n  data: any;\n};\n\nexport const uploadFilesInternal = async (\n  data: {\n    files: FileEsque[];\n    metadata: Json;\n  },\n  opts: {\n    apiKey: string;\n    utVersion: string;\n  },\n) => {\n  // Request presigned URLs for each file\n  const fileData = data.files.map((file) => ({\n    name: file.name ?? \"unnamed-blob\",\n    type: file.type,\n    size: file.size,\n  }));\n  const res = await fetch(generateUploadThingURL(\"/api/uploadFiles\"), {\n    method: \"POST\",\n    headers: {\n      \"x-uploadthing-api-key\": opts.apiKey,\n      \"x-uploadthing-version\": opts.utVersion,\n    },\n    cache: \"no-store\",\n    body: JSON.stringify({\n      files: fileData,\n      metadata: data.metadata,\n    }),\n  });\n\n  if (!res.ok) {\n    const error = await UploadThingError.fromResponse(res);\n    throw error;\n  }\n\n  const clonedRes = res.clone(); // so that `UploadThingError.fromResponse()` can consume the body again\n  const json = (await res.json()) as\n    | {\n        data: {\n          presignedUrl: string; // url to post to\n          fields: Record<string, string>;\n          key: string;\n          fileUrl: string; // the final url of the file after upload\n        }[];\n      }\n    | { error: string };\n\n  if (\"error\" in json) {\n    const error = await UploadThingError.fromResponse(clonedRes);\n    throw error;\n  }\n\n  // Upload each file to S3\n  const uploads = await Promise.allSettled(\n    data.files.map(async (file, i) => {\n      const { presignedUrl, fields, key, fileUrl } = json.data[i];\n\n      if (!presignedUrl || !fields) {\n        throw new UploadThingError({\n          code: \"URL_GENERATION_FAILED\",\n          message: \"Failed to generate presigned URL\",\n          cause: JSON.stringify(json.data[i]),\n        });\n      }\n\n      const formData = new FormData();\n      formData.append(\"Content-Type\", file.type);\n      Object.entries(fields).forEach(([key, value]) => {\n        formData.append(key, value);\n      });\n\n      formData.append(\n        \"file\",\n        // Handles case when there is no file name\n        file.name\n          ? (file as File)\n          : Object.assign(file as File, { name: \"unnamed-blob\" }),\n      );\n\n      // Do S3 upload\n      const s3res = await fetch(presignedUrl, {\n        method: \"POST\",\n        body: formData,\n        headers: new Headers({\n          Accept: \"application/xml\",\n        }),\n      });\n\n      if (!s3res.ok) {\n        // tell uploadthing infra server that upload failed\n        await fetch(generateUploadThingURL(\"/api/failureCallback\"), {\n          method: \"POST\",\n          body: JSON.stringify({\n            fileKey: fields.key,\n          }),\n          headers: {\n            \"x-uploadthing-api-key\": opts.apiKey,\n            \"x-uploadthing-version\": opts.utVersion,\n          },\n        });\n\n        const text = await s3res.text();\n        const parsed = maybeParseResponseXML(text);\n        if (parsed?.message) {\n          throw new UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: parsed.message,\n          });\n        }\n        throw new UploadThingError({\n          code: \"UPLOAD_FAILED\",\n          message: \"Failed to upload file to storage provider\",\n          cause: s3res,\n        });\n      }\n\n      // Poll for file to be available\n      await pollForFileData(key);\n\n      return {\n        key,\n        url: fileUrl,\n        name: file.name,\n        size: file.size,\n      };\n    }),\n  );\n\n  return uploads.map((upload) => {\n    if (upload.status === \"fulfilled\") {\n      const data = upload.value satisfies UploadData;\n      return { data, error: null };\n    }\n    // We only throw UploadThingErrors, so this is safe\n    const reason = upload.reason as UploadThingError;\n    const error = UploadThingError.toObject(reason) satisfies UploadError;\n    return { data: null, error };\n  });\n};\n"],"mappings":"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","names":["UploadThingError","generateUploadThingURL","UploadThingError","key","data","UploadThingError","generateUploadThingURL","UploadThingError"]}