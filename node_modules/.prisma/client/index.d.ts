
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Curator
 * 
 */
export type Curator = $Result.DefaultSelection<Prisma.$CuratorPayload>
/**
 * Model Artist
 * 
 */
export type Artist = $Result.DefaultSelection<Prisma.$ArtistPayload>
/**
 * Model ArtPiece
 * 
 */
export type ArtPiece = $Result.DefaultSelection<Prisma.$ArtPiecePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Curators
 * const curators = await prisma.curator.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Curators
   * const curators = await prisma.curator.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.curator`: Exposes CRUD operations for the **Curator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Curators
    * const curators = await prisma.curator.findMany()
    * ```
    */
  get curator(): Prisma.CuratorDelegate<ExtArgs>;

  /**
   * `prisma.artist`: Exposes CRUD operations for the **Artist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artists
    * const artists = await prisma.artist.findMany()
    * ```
    */
  get artist(): Prisma.ArtistDelegate<ExtArgs>;

  /**
   * `prisma.artPiece`: Exposes CRUD operations for the **ArtPiece** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtPieces
    * const artPieces = await prisma.artPiece.findMany()
    * ```
    */
  get artPiece(): Prisma.ArtPieceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Curator: 'Curator',
    Artist: 'Artist',
    ArtPiece: 'ArtPiece'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'curator' | 'artist' | 'artPiece'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Curator: {
        payload: Prisma.$CuratorPayload<ExtArgs>
        fields: Prisma.CuratorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CuratorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuratorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CuratorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuratorPayload>
          }
          findFirst: {
            args: Prisma.CuratorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuratorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CuratorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuratorPayload>
          }
          findMany: {
            args: Prisma.CuratorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuratorPayload>[]
          }
          create: {
            args: Prisma.CuratorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuratorPayload>
          }
          createMany: {
            args: Prisma.CuratorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CuratorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuratorPayload>
          }
          update: {
            args: Prisma.CuratorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuratorPayload>
          }
          deleteMany: {
            args: Prisma.CuratorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CuratorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CuratorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CuratorPayload>
          }
          aggregate: {
            args: Prisma.CuratorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCurator>
          }
          groupBy: {
            args: Prisma.CuratorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CuratorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CuratorCountArgs<ExtArgs>,
            result: $Utils.Optional<CuratorCountAggregateOutputType> | number
          }
        }
      }
      Artist: {
        payload: Prisma.$ArtistPayload<ExtArgs>
        fields: Prisma.ArtistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtistFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtistFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          findFirst: {
            args: Prisma.ArtistFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtistFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          findMany: {
            args: Prisma.ArtistFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>[]
          }
          create: {
            args: Prisma.ArtistCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          createMany: {
            args: Prisma.ArtistCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ArtistDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          update: {
            args: Prisma.ArtistUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          deleteMany: {
            args: Prisma.ArtistDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ArtistUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ArtistUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtistPayload>
          }
          aggregate: {
            args: Prisma.ArtistAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateArtist>
          }
          groupBy: {
            args: Prisma.ArtistGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ArtistGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArtistCountArgs<ExtArgs>,
            result: $Utils.Optional<ArtistCountAggregateOutputType> | number
          }
        }
      }
      ArtPiece: {
        payload: Prisma.$ArtPiecePayload<ExtArgs>
        fields: Prisma.ArtPieceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtPieceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtPiecePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtPieceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtPiecePayload>
          }
          findFirst: {
            args: Prisma.ArtPieceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtPiecePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtPieceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtPiecePayload>
          }
          findMany: {
            args: Prisma.ArtPieceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtPiecePayload>[]
          }
          create: {
            args: Prisma.ArtPieceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtPiecePayload>
          }
          createMany: {
            args: Prisma.ArtPieceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ArtPieceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtPiecePayload>
          }
          update: {
            args: Prisma.ArtPieceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtPiecePayload>
          }
          deleteMany: {
            args: Prisma.ArtPieceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ArtPieceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ArtPieceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtPiecePayload>
          }
          aggregate: {
            args: Prisma.ArtPieceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateArtPiece>
          }
          groupBy: {
            args: Prisma.ArtPieceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ArtPieceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArtPieceCountArgs<ExtArgs>,
            result: $Utils.Optional<ArtPieceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CuratorCountOutputType
   */

  export type CuratorCountOutputType = {
    artPieces: number
  }

  export type CuratorCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    artPieces?: boolean | CuratorCountOutputTypeCountArtPiecesArgs
  }

  // Custom InputTypes

  /**
   * CuratorCountOutputType without action
   */
  export type CuratorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuratorCountOutputType
     */
    select?: CuratorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CuratorCountOutputType without action
   */
  export type CuratorCountOutputTypeCountArtPiecesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ArtPieceWhereInput
  }



  /**
   * Count Type ArtistCountOutputType
   */

  export type ArtistCountOutputType = {
    artPieces: number
  }

  export type ArtistCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    artPieces?: boolean | ArtistCountOutputTypeCountArtPiecesArgs
  }

  // Custom InputTypes

  /**
   * ArtistCountOutputType without action
   */
  export type ArtistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtistCountOutputType
     */
    select?: ArtistCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ArtistCountOutputType without action
   */
  export type ArtistCountOutputTypeCountArtPiecesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ArtPieceWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Curator
   */

  export type AggregateCurator = {
    _count: CuratorCountAggregateOutputType | null
    _min: CuratorMinAggregateOutputType | null
    _max: CuratorMaxAggregateOutputType | null
  }

  export type CuratorMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    artPiece: string | null
  }

  export type CuratorMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    artPiece: string | null
  }

  export type CuratorCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    phone: number
    email: number
    artPiece: number
    _all: number
  }


  export type CuratorMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    artPiece?: true
  }

  export type CuratorMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    artPiece?: true
  }

  export type CuratorCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    artPiece?: true
    _all?: true
  }

  export type CuratorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Curator to aggregate.
     */
    where?: CuratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curators to fetch.
     */
    orderBy?: CuratorOrderByWithRelationInput | CuratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CuratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Curators
    **/
    _count?: true | CuratorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CuratorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CuratorMaxAggregateInputType
  }

  export type GetCuratorAggregateType<T extends CuratorAggregateArgs> = {
        [P in keyof T & keyof AggregateCurator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurator[P]>
      : GetScalarType<T[P], AggregateCurator[P]>
  }




  export type CuratorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CuratorWhereInput
    orderBy?: CuratorOrderByWithAggregationInput | CuratorOrderByWithAggregationInput[]
    by: CuratorScalarFieldEnum[] | CuratorScalarFieldEnum
    having?: CuratorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CuratorCountAggregateInputType | true
    _min?: CuratorMinAggregateInputType
    _max?: CuratorMaxAggregateInputType
  }

  export type CuratorGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece: string
    _count: CuratorCountAggregateOutputType | null
    _min: CuratorMinAggregateOutputType | null
    _max: CuratorMaxAggregateOutputType | null
  }

  type GetCuratorGroupByPayload<T extends CuratorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CuratorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CuratorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CuratorGroupByOutputType[P]>
            : GetScalarType<T[P], CuratorGroupByOutputType[P]>
        }
      >
    >


  export type CuratorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    artPiece?: boolean
    artPieces?: boolean | Curator$artPiecesArgs<ExtArgs>
    _count?: boolean | CuratorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["curator"]>

  export type CuratorSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    artPiece?: boolean
  }

  export type CuratorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    artPieces?: boolean | Curator$artPiecesArgs<ExtArgs>
    _count?: boolean | CuratorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CuratorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Curator"
    objects: {
      artPieces: Prisma.$ArtPiecePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      firstName: string
      lastName: string
      phone: string
      email: string
      artPiece: string
    }, ExtArgs["result"]["curator"]>
    composites: {}
  }


  type CuratorGetPayload<S extends boolean | null | undefined | CuratorDefaultArgs> = $Result.GetResult<Prisma.$CuratorPayload, S>

  type CuratorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CuratorFindManyArgs, 'select' | 'include'> & {
      select?: CuratorCountAggregateInputType | true
    }

  export interface CuratorDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Curator'], meta: { name: 'Curator' } }
    /**
     * Find zero or one Curator that matches the filter.
     * @param {CuratorFindUniqueArgs} args - Arguments to find a Curator
     * @example
     * // Get one Curator
     * const curator = await prisma.curator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CuratorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CuratorFindUniqueArgs<ExtArgs>>
    ): Prisma__CuratorClient<$Result.GetResult<Prisma.$CuratorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Curator that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CuratorFindUniqueOrThrowArgs} args - Arguments to find a Curator
     * @example
     * // Get one Curator
     * const curator = await prisma.curator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CuratorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CuratorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CuratorClient<$Result.GetResult<Prisma.$CuratorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Curator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuratorFindFirstArgs} args - Arguments to find a Curator
     * @example
     * // Get one Curator
     * const curator = await prisma.curator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CuratorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CuratorFindFirstArgs<ExtArgs>>
    ): Prisma__CuratorClient<$Result.GetResult<Prisma.$CuratorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Curator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuratorFindFirstOrThrowArgs} args - Arguments to find a Curator
     * @example
     * // Get one Curator
     * const curator = await prisma.curator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CuratorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CuratorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CuratorClient<$Result.GetResult<Prisma.$CuratorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Curators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuratorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Curators
     * const curators = await prisma.curator.findMany()
     * 
     * // Get first 10 Curators
     * const curators = await prisma.curator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const curatorWithIdOnly = await prisma.curator.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CuratorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CuratorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuratorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Curator.
     * @param {CuratorCreateArgs} args - Arguments to create a Curator.
     * @example
     * // Create one Curator
     * const Curator = await prisma.curator.create({
     *   data: {
     *     // ... data to create a Curator
     *   }
     * })
     * 
    **/
    create<T extends CuratorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CuratorCreateArgs<ExtArgs>>
    ): Prisma__CuratorClient<$Result.GetResult<Prisma.$CuratorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Curators.
     *     @param {CuratorCreateManyArgs} args - Arguments to create many Curators.
     *     @example
     *     // Create many Curators
     *     const curator = await prisma.curator.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CuratorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CuratorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Curator.
     * @param {CuratorDeleteArgs} args - Arguments to delete one Curator.
     * @example
     * // Delete one Curator
     * const Curator = await prisma.curator.delete({
     *   where: {
     *     // ... filter to delete one Curator
     *   }
     * })
     * 
    **/
    delete<T extends CuratorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CuratorDeleteArgs<ExtArgs>>
    ): Prisma__CuratorClient<$Result.GetResult<Prisma.$CuratorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Curator.
     * @param {CuratorUpdateArgs} args - Arguments to update one Curator.
     * @example
     * // Update one Curator
     * const curator = await prisma.curator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CuratorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CuratorUpdateArgs<ExtArgs>>
    ): Prisma__CuratorClient<$Result.GetResult<Prisma.$CuratorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Curators.
     * @param {CuratorDeleteManyArgs} args - Arguments to filter Curators to delete.
     * @example
     * // Delete a few Curators
     * const { count } = await prisma.curator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CuratorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CuratorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Curators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuratorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Curators
     * const curator = await prisma.curator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CuratorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CuratorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Curator.
     * @param {CuratorUpsertArgs} args - Arguments to update or create a Curator.
     * @example
     * // Update or create a Curator
     * const curator = await prisma.curator.upsert({
     *   create: {
     *     // ... data to create a Curator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Curator we want to update
     *   }
     * })
    **/
    upsert<T extends CuratorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CuratorUpsertArgs<ExtArgs>>
    ): Prisma__CuratorClient<$Result.GetResult<Prisma.$CuratorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Curators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuratorCountArgs} args - Arguments to filter Curators to count.
     * @example
     * // Count the number of Curators
     * const count = await prisma.curator.count({
     *   where: {
     *     // ... the filter for the Curators we want to count
     *   }
     * })
    **/
    count<T extends CuratorCountArgs>(
      args?: Subset<T, CuratorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CuratorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Curator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuratorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CuratorAggregateArgs>(args: Subset<T, CuratorAggregateArgs>): Prisma.PrismaPromise<GetCuratorAggregateType<T>>

    /**
     * Group by Curator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuratorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CuratorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CuratorGroupByArgs['orderBy'] }
        : { orderBy?: CuratorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CuratorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCuratorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Curator model
   */
  readonly fields: CuratorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Curator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CuratorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    artPieces<T extends Curator$artPiecesArgs<ExtArgs> = {}>(args?: Subset<T, Curator$artPiecesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtPiecePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Curator model
   */ 
  interface CuratorFieldRefs {
    readonly id: FieldRef<"Curator", 'String'>
    readonly firstName: FieldRef<"Curator", 'String'>
    readonly lastName: FieldRef<"Curator", 'String'>
    readonly phone: FieldRef<"Curator", 'String'>
    readonly email: FieldRef<"Curator", 'String'>
    readonly artPiece: FieldRef<"Curator", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Curator findUnique
   */
  export type CuratorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curator
     */
    select?: CuratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CuratorInclude<ExtArgs> | null
    /**
     * Filter, which Curator to fetch.
     */
    where: CuratorWhereUniqueInput
  }


  /**
   * Curator findUniqueOrThrow
   */
  export type CuratorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curator
     */
    select?: CuratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CuratorInclude<ExtArgs> | null
    /**
     * Filter, which Curator to fetch.
     */
    where: CuratorWhereUniqueInput
  }


  /**
   * Curator findFirst
   */
  export type CuratorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curator
     */
    select?: CuratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CuratorInclude<ExtArgs> | null
    /**
     * Filter, which Curator to fetch.
     */
    where?: CuratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curators to fetch.
     */
    orderBy?: CuratorOrderByWithRelationInput | CuratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Curators.
     */
    cursor?: CuratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Curators.
     */
    distinct?: CuratorScalarFieldEnum | CuratorScalarFieldEnum[]
  }


  /**
   * Curator findFirstOrThrow
   */
  export type CuratorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curator
     */
    select?: CuratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CuratorInclude<ExtArgs> | null
    /**
     * Filter, which Curator to fetch.
     */
    where?: CuratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curators to fetch.
     */
    orderBy?: CuratorOrderByWithRelationInput | CuratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Curators.
     */
    cursor?: CuratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Curators.
     */
    distinct?: CuratorScalarFieldEnum | CuratorScalarFieldEnum[]
  }


  /**
   * Curator findMany
   */
  export type CuratorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curator
     */
    select?: CuratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CuratorInclude<ExtArgs> | null
    /**
     * Filter, which Curators to fetch.
     */
    where?: CuratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Curators to fetch.
     */
    orderBy?: CuratorOrderByWithRelationInput | CuratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Curators.
     */
    cursor?: CuratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Curators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Curators.
     */
    skip?: number
    distinct?: CuratorScalarFieldEnum | CuratorScalarFieldEnum[]
  }


  /**
   * Curator create
   */
  export type CuratorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curator
     */
    select?: CuratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CuratorInclude<ExtArgs> | null
    /**
     * The data needed to create a Curator.
     */
    data: XOR<CuratorCreateInput, CuratorUncheckedCreateInput>
  }


  /**
   * Curator createMany
   */
  export type CuratorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Curators.
     */
    data: CuratorCreateManyInput | CuratorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Curator update
   */
  export type CuratorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curator
     */
    select?: CuratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CuratorInclude<ExtArgs> | null
    /**
     * The data needed to update a Curator.
     */
    data: XOR<CuratorUpdateInput, CuratorUncheckedUpdateInput>
    /**
     * Choose, which Curator to update.
     */
    where: CuratorWhereUniqueInput
  }


  /**
   * Curator updateMany
   */
  export type CuratorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Curators.
     */
    data: XOR<CuratorUpdateManyMutationInput, CuratorUncheckedUpdateManyInput>
    /**
     * Filter which Curators to update
     */
    where?: CuratorWhereInput
  }


  /**
   * Curator upsert
   */
  export type CuratorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curator
     */
    select?: CuratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CuratorInclude<ExtArgs> | null
    /**
     * The filter to search for the Curator to update in case it exists.
     */
    where: CuratorWhereUniqueInput
    /**
     * In case the Curator found by the `where` argument doesn't exist, create a new Curator with this data.
     */
    create: XOR<CuratorCreateInput, CuratorUncheckedCreateInput>
    /**
     * In case the Curator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CuratorUpdateInput, CuratorUncheckedUpdateInput>
  }


  /**
   * Curator delete
   */
  export type CuratorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curator
     */
    select?: CuratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CuratorInclude<ExtArgs> | null
    /**
     * Filter which Curator to delete.
     */
    where: CuratorWhereUniqueInput
  }


  /**
   * Curator deleteMany
   */
  export type CuratorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Curators to delete
     */
    where?: CuratorWhereInput
  }


  /**
   * Curator.artPieces
   */
  export type Curator$artPiecesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
    where?: ArtPieceWhereInput
    orderBy?: ArtPieceOrderByWithRelationInput | ArtPieceOrderByWithRelationInput[]
    cursor?: ArtPieceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtPieceScalarFieldEnum | ArtPieceScalarFieldEnum[]
  }


  /**
   * Curator without action
   */
  export type CuratorDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curator
     */
    select?: CuratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CuratorInclude<ExtArgs> | null
  }



  /**
   * Model Artist
   */

  export type AggregateArtist = {
    _count: ArtistCountAggregateOutputType | null
    _min: ArtistMinAggregateOutputType | null
    _max: ArtistMaxAggregateOutputType | null
  }

  export type ArtistMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    artPiece: string | null
  }

  export type ArtistMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    artPiece: string | null
  }

  export type ArtistCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    phone: number
    email: number
    artPiece: number
    _all: number
  }


  export type ArtistMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    artPiece?: true
  }

  export type ArtistMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    artPiece?: true
  }

  export type ArtistCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    artPiece?: true
    _all?: true
  }

  export type ArtistAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artist to aggregate.
     */
    where?: ArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artists to fetch.
     */
    orderBy?: ArtistOrderByWithRelationInput | ArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Artists
    **/
    _count?: true | ArtistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtistMaxAggregateInputType
  }

  export type GetArtistAggregateType<T extends ArtistAggregateArgs> = {
        [P in keyof T & keyof AggregateArtist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtist[P]>
      : GetScalarType<T[P], AggregateArtist[P]>
  }




  export type ArtistGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ArtistWhereInput
    orderBy?: ArtistOrderByWithAggregationInput | ArtistOrderByWithAggregationInput[]
    by: ArtistScalarFieldEnum[] | ArtistScalarFieldEnum
    having?: ArtistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtistCountAggregateInputType | true
    _min?: ArtistMinAggregateInputType
    _max?: ArtistMaxAggregateInputType
  }

  export type ArtistGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece: string
    _count: ArtistCountAggregateOutputType | null
    _min: ArtistMinAggregateOutputType | null
    _max: ArtistMaxAggregateOutputType | null
  }

  type GetArtistGroupByPayload<T extends ArtistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtistGroupByOutputType[P]>
            : GetScalarType<T[P], ArtistGroupByOutputType[P]>
        }
      >
    >


  export type ArtistSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    artPiece?: boolean
    artPieces?: boolean | Artist$artPiecesArgs<ExtArgs>
    _count?: boolean | ArtistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artist"]>

  export type ArtistSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    artPiece?: boolean
  }

  export type ArtistInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    artPieces?: boolean | Artist$artPiecesArgs<ExtArgs>
    _count?: boolean | ArtistCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ArtistPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Artist"
    objects: {
      artPieces: Prisma.$ArtPiecePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      firstName: string
      lastName: string
      phone: string
      email: string
      artPiece: string
    }, ExtArgs["result"]["artist"]>
    composites: {}
  }


  type ArtistGetPayload<S extends boolean | null | undefined | ArtistDefaultArgs> = $Result.GetResult<Prisma.$ArtistPayload, S>

  type ArtistCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ArtistFindManyArgs, 'select' | 'include'> & {
      select?: ArtistCountAggregateInputType | true
    }

  export interface ArtistDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Artist'], meta: { name: 'Artist' } }
    /**
     * Find zero or one Artist that matches the filter.
     * @param {ArtistFindUniqueArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArtistFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ArtistFindUniqueArgs<ExtArgs>>
    ): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Artist that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ArtistFindUniqueOrThrowArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArtistFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtistFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Artist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistFindFirstArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArtistFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtistFindFirstArgs<ExtArgs>>
    ): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Artist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistFindFirstOrThrowArgs} args - Arguments to find a Artist
     * @example
     * // Get one Artist
     * const artist = await prisma.artist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArtistFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtistFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Artists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artists
     * const artists = await prisma.artist.findMany()
     * 
     * // Get first 10 Artists
     * const artists = await prisma.artist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artistWithIdOnly = await prisma.artist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArtistFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtistFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Artist.
     * @param {ArtistCreateArgs} args - Arguments to create a Artist.
     * @example
     * // Create one Artist
     * const Artist = await prisma.artist.create({
     *   data: {
     *     // ... data to create a Artist
     *   }
     * })
     * 
    **/
    create<T extends ArtistCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtistCreateArgs<ExtArgs>>
    ): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Artists.
     *     @param {ArtistCreateManyArgs} args - Arguments to create many Artists.
     *     @example
     *     // Create many Artists
     *     const artist = await prisma.artist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ArtistCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtistCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Artist.
     * @param {ArtistDeleteArgs} args - Arguments to delete one Artist.
     * @example
     * // Delete one Artist
     * const Artist = await prisma.artist.delete({
     *   where: {
     *     // ... filter to delete one Artist
     *   }
     * })
     * 
    **/
    delete<T extends ArtistDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ArtistDeleteArgs<ExtArgs>>
    ): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Artist.
     * @param {ArtistUpdateArgs} args - Arguments to update one Artist.
     * @example
     * // Update one Artist
     * const artist = await prisma.artist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArtistUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtistUpdateArgs<ExtArgs>>
    ): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Artists.
     * @param {ArtistDeleteManyArgs} args - Arguments to filter Artists to delete.
     * @example
     * // Delete a few Artists
     * const { count } = await prisma.artist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArtistDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtistDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artists
     * const artist = await prisma.artist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArtistUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ArtistUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Artist.
     * @param {ArtistUpsertArgs} args - Arguments to update or create a Artist.
     * @example
     * // Update or create a Artist
     * const artist = await prisma.artist.upsert({
     *   create: {
     *     // ... data to create a Artist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artist we want to update
     *   }
     * })
    **/
    upsert<T extends ArtistUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ArtistUpsertArgs<ExtArgs>>
    ): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Artists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistCountArgs} args - Arguments to filter Artists to count.
     * @example
     * // Count the number of Artists
     * const count = await prisma.artist.count({
     *   where: {
     *     // ... the filter for the Artists we want to count
     *   }
     * })
    **/
    count<T extends ArtistCountArgs>(
      args?: Subset<T, ArtistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtistAggregateArgs>(args: Subset<T, ArtistAggregateArgs>): Prisma.PrismaPromise<GetArtistAggregateType<T>>

    /**
     * Group by Artist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtistGroupByArgs['orderBy'] }
        : { orderBy?: ArtistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Artist model
   */
  readonly fields: ArtistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Artist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtistClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    artPieces<T extends Artist$artPiecesArgs<ExtArgs> = {}>(args?: Subset<T, Artist$artPiecesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtPiecePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Artist model
   */ 
  interface ArtistFieldRefs {
    readonly id: FieldRef<"Artist", 'String'>
    readonly firstName: FieldRef<"Artist", 'String'>
    readonly lastName: FieldRef<"Artist", 'String'>
    readonly phone: FieldRef<"Artist", 'String'>
    readonly email: FieldRef<"Artist", 'String'>
    readonly artPiece: FieldRef<"Artist", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Artist findUnique
   */
  export type ArtistFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter, which Artist to fetch.
     */
    where: ArtistWhereUniqueInput
  }


  /**
   * Artist findUniqueOrThrow
   */
  export type ArtistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter, which Artist to fetch.
     */
    where: ArtistWhereUniqueInput
  }


  /**
   * Artist findFirst
   */
  export type ArtistFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter, which Artist to fetch.
     */
    where?: ArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artists to fetch.
     */
    orderBy?: ArtistOrderByWithRelationInput | ArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artists.
     */
    cursor?: ArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artists.
     */
    distinct?: ArtistScalarFieldEnum | ArtistScalarFieldEnum[]
  }


  /**
   * Artist findFirstOrThrow
   */
  export type ArtistFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter, which Artist to fetch.
     */
    where?: ArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artists to fetch.
     */
    orderBy?: ArtistOrderByWithRelationInput | ArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artists.
     */
    cursor?: ArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artists.
     */
    distinct?: ArtistScalarFieldEnum | ArtistScalarFieldEnum[]
  }


  /**
   * Artist findMany
   */
  export type ArtistFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter, which Artists to fetch.
     */
    where?: ArtistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artists to fetch.
     */
    orderBy?: ArtistOrderByWithRelationInput | ArtistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Artists.
     */
    cursor?: ArtistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artists.
     */
    skip?: number
    distinct?: ArtistScalarFieldEnum | ArtistScalarFieldEnum[]
  }


  /**
   * Artist create
   */
  export type ArtistCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * The data needed to create a Artist.
     */
    data: XOR<ArtistCreateInput, ArtistUncheckedCreateInput>
  }


  /**
   * Artist createMany
   */
  export type ArtistCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Artists.
     */
    data: ArtistCreateManyInput | ArtistCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Artist update
   */
  export type ArtistUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * The data needed to update a Artist.
     */
    data: XOR<ArtistUpdateInput, ArtistUncheckedUpdateInput>
    /**
     * Choose, which Artist to update.
     */
    where: ArtistWhereUniqueInput
  }


  /**
   * Artist updateMany
   */
  export type ArtistUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Artists.
     */
    data: XOR<ArtistUpdateManyMutationInput, ArtistUncheckedUpdateManyInput>
    /**
     * Filter which Artists to update
     */
    where?: ArtistWhereInput
  }


  /**
   * Artist upsert
   */
  export type ArtistUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * The filter to search for the Artist to update in case it exists.
     */
    where: ArtistWhereUniqueInput
    /**
     * In case the Artist found by the `where` argument doesn't exist, create a new Artist with this data.
     */
    create: XOR<ArtistCreateInput, ArtistUncheckedCreateInput>
    /**
     * In case the Artist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtistUpdateInput, ArtistUncheckedUpdateInput>
  }


  /**
   * Artist delete
   */
  export type ArtistDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtistInclude<ExtArgs> | null
    /**
     * Filter which Artist to delete.
     */
    where: ArtistWhereUniqueInput
  }


  /**
   * Artist deleteMany
   */
  export type ArtistDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artists to delete
     */
    where?: ArtistWhereInput
  }


  /**
   * Artist.artPieces
   */
  export type Artist$artPiecesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
    where?: ArtPieceWhereInput
    orderBy?: ArtPieceOrderByWithRelationInput | ArtPieceOrderByWithRelationInput[]
    cursor?: ArtPieceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtPieceScalarFieldEnum | ArtPieceScalarFieldEnum[]
  }


  /**
   * Artist without action
   */
  export type ArtistDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artist
     */
    select?: ArtistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtistInclude<ExtArgs> | null
  }



  /**
   * Model ArtPiece
   */

  export type AggregateArtPiece = {
    _count: ArtPieceCountAggregateOutputType | null
    _avg: ArtPieceAvgAggregateOutputType | null
    _sum: ArtPieceSumAggregateOutputType | null
    _min: ArtPieceMinAggregateOutputType | null
    _max: ArtPieceMaxAggregateOutputType | null
  }

  export type ArtPieceAvgAggregateOutputType = {
    year: number | null
    price: number | null
    estimate: number | null
  }

  export type ArtPieceSumAggregateOutputType = {
    year: number | null
    price: number | null
    estimate: number | null
  }

  export type ArtPieceMinAggregateOutputType = {
    id: string | null
    title: string | null
    imgUrl: string | null
    year: number | null
    price: number | null
    estimate: number | null
    artistId: string | null
    curatorId: string | null
  }

  export type ArtPieceMaxAggregateOutputType = {
    id: string | null
    title: string | null
    imgUrl: string | null
    year: number | null
    price: number | null
    estimate: number | null
    artistId: string | null
    curatorId: string | null
  }

  export type ArtPieceCountAggregateOutputType = {
    id: number
    title: number
    imgUrl: number
    year: number
    price: number
    estimate: number
    artistId: number
    curatorId: number
    _all: number
  }


  export type ArtPieceAvgAggregateInputType = {
    year?: true
    price?: true
    estimate?: true
  }

  export type ArtPieceSumAggregateInputType = {
    year?: true
    price?: true
    estimate?: true
  }

  export type ArtPieceMinAggregateInputType = {
    id?: true
    title?: true
    imgUrl?: true
    year?: true
    price?: true
    estimate?: true
    artistId?: true
    curatorId?: true
  }

  export type ArtPieceMaxAggregateInputType = {
    id?: true
    title?: true
    imgUrl?: true
    year?: true
    price?: true
    estimate?: true
    artistId?: true
    curatorId?: true
  }

  export type ArtPieceCountAggregateInputType = {
    id?: true
    title?: true
    imgUrl?: true
    year?: true
    price?: true
    estimate?: true
    artistId?: true
    curatorId?: true
    _all?: true
  }

  export type ArtPieceAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtPiece to aggregate.
     */
    where?: ArtPieceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtPieces to fetch.
     */
    orderBy?: ArtPieceOrderByWithRelationInput | ArtPieceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtPieceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtPieces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtPieces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArtPieces
    **/
    _count?: true | ArtPieceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtPieceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtPieceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtPieceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtPieceMaxAggregateInputType
  }

  export type GetArtPieceAggregateType<T extends ArtPieceAggregateArgs> = {
        [P in keyof T & keyof AggregateArtPiece]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtPiece[P]>
      : GetScalarType<T[P], AggregateArtPiece[P]>
  }




  export type ArtPieceGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ArtPieceWhereInput
    orderBy?: ArtPieceOrderByWithAggregationInput | ArtPieceOrderByWithAggregationInput[]
    by: ArtPieceScalarFieldEnum[] | ArtPieceScalarFieldEnum
    having?: ArtPieceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtPieceCountAggregateInputType | true
    _avg?: ArtPieceAvgAggregateInputType
    _sum?: ArtPieceSumAggregateInputType
    _min?: ArtPieceMinAggregateInputType
    _max?: ArtPieceMaxAggregateInputType
  }

  export type ArtPieceGroupByOutputType = {
    id: string
    title: string
    imgUrl: string
    year: number
    price: number
    estimate: number
    artistId: string
    curatorId: string
    _count: ArtPieceCountAggregateOutputType | null
    _avg: ArtPieceAvgAggregateOutputType | null
    _sum: ArtPieceSumAggregateOutputType | null
    _min: ArtPieceMinAggregateOutputType | null
    _max: ArtPieceMaxAggregateOutputType | null
  }

  type GetArtPieceGroupByPayload<T extends ArtPieceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtPieceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtPieceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtPieceGroupByOutputType[P]>
            : GetScalarType<T[P], ArtPieceGroupByOutputType[P]>
        }
      >
    >


  export type ArtPieceSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    imgUrl?: boolean
    year?: boolean
    price?: boolean
    estimate?: boolean
    artistId?: boolean
    curatorId?: boolean
    artist?: boolean | ArtistDefaultArgs<ExtArgs>
    curator?: boolean | CuratorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artPiece"]>

  export type ArtPieceSelectScalar = {
    id?: boolean
    title?: boolean
    imgUrl?: boolean
    year?: boolean
    price?: boolean
    estimate?: boolean
    artistId?: boolean
    curatorId?: boolean
  }

  export type ArtPieceInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    artist?: boolean | ArtistDefaultArgs<ExtArgs>
    curator?: boolean | CuratorDefaultArgs<ExtArgs>
  }


  export type $ArtPiecePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ArtPiece"
    objects: {
      artist: Prisma.$ArtistPayload<ExtArgs>
      curator: Prisma.$CuratorPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      title: string
      imgUrl: string
      year: number
      price: number
      estimate: number
      artistId: string
      curatorId: string
    }, ExtArgs["result"]["artPiece"]>
    composites: {}
  }


  type ArtPieceGetPayload<S extends boolean | null | undefined | ArtPieceDefaultArgs> = $Result.GetResult<Prisma.$ArtPiecePayload, S>

  type ArtPieceCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ArtPieceFindManyArgs, 'select' | 'include'> & {
      select?: ArtPieceCountAggregateInputType | true
    }

  export interface ArtPieceDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArtPiece'], meta: { name: 'ArtPiece' } }
    /**
     * Find zero or one ArtPiece that matches the filter.
     * @param {ArtPieceFindUniqueArgs} args - Arguments to find a ArtPiece
     * @example
     * // Get one ArtPiece
     * const artPiece = await prisma.artPiece.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArtPieceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ArtPieceFindUniqueArgs<ExtArgs>>
    ): Prisma__ArtPieceClient<$Result.GetResult<Prisma.$ArtPiecePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ArtPiece that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ArtPieceFindUniqueOrThrowArgs} args - Arguments to find a ArtPiece
     * @example
     * // Get one ArtPiece
     * const artPiece = await prisma.artPiece.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArtPieceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtPieceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ArtPieceClient<$Result.GetResult<Prisma.$ArtPiecePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ArtPiece that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtPieceFindFirstArgs} args - Arguments to find a ArtPiece
     * @example
     * // Get one ArtPiece
     * const artPiece = await prisma.artPiece.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArtPieceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtPieceFindFirstArgs<ExtArgs>>
    ): Prisma__ArtPieceClient<$Result.GetResult<Prisma.$ArtPiecePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ArtPiece that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtPieceFindFirstOrThrowArgs} args - Arguments to find a ArtPiece
     * @example
     * // Get one ArtPiece
     * const artPiece = await prisma.artPiece.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArtPieceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtPieceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ArtPieceClient<$Result.GetResult<Prisma.$ArtPiecePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ArtPieces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtPieceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtPieces
     * const artPieces = await prisma.artPiece.findMany()
     * 
     * // Get first 10 ArtPieces
     * const artPieces = await prisma.artPiece.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artPieceWithIdOnly = await prisma.artPiece.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArtPieceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtPieceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtPiecePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ArtPiece.
     * @param {ArtPieceCreateArgs} args - Arguments to create a ArtPiece.
     * @example
     * // Create one ArtPiece
     * const ArtPiece = await prisma.artPiece.create({
     *   data: {
     *     // ... data to create a ArtPiece
     *   }
     * })
     * 
    **/
    create<T extends ArtPieceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtPieceCreateArgs<ExtArgs>>
    ): Prisma__ArtPieceClient<$Result.GetResult<Prisma.$ArtPiecePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ArtPieces.
     *     @param {ArtPieceCreateManyArgs} args - Arguments to create many ArtPieces.
     *     @example
     *     // Create many ArtPieces
     *     const artPiece = await prisma.artPiece.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ArtPieceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtPieceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ArtPiece.
     * @param {ArtPieceDeleteArgs} args - Arguments to delete one ArtPiece.
     * @example
     * // Delete one ArtPiece
     * const ArtPiece = await prisma.artPiece.delete({
     *   where: {
     *     // ... filter to delete one ArtPiece
     *   }
     * })
     * 
    **/
    delete<T extends ArtPieceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ArtPieceDeleteArgs<ExtArgs>>
    ): Prisma__ArtPieceClient<$Result.GetResult<Prisma.$ArtPiecePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ArtPiece.
     * @param {ArtPieceUpdateArgs} args - Arguments to update one ArtPiece.
     * @example
     * // Update one ArtPiece
     * const artPiece = await prisma.artPiece.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArtPieceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtPieceUpdateArgs<ExtArgs>>
    ): Prisma__ArtPieceClient<$Result.GetResult<Prisma.$ArtPiecePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ArtPieces.
     * @param {ArtPieceDeleteManyArgs} args - Arguments to filter ArtPieces to delete.
     * @example
     * // Delete a few ArtPieces
     * const { count } = await prisma.artPiece.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArtPieceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtPieceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtPieces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtPieceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtPieces
     * const artPiece = await prisma.artPiece.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArtPieceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ArtPieceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtPiece.
     * @param {ArtPieceUpsertArgs} args - Arguments to update or create a ArtPiece.
     * @example
     * // Update or create a ArtPiece
     * const artPiece = await prisma.artPiece.upsert({
     *   create: {
     *     // ... data to create a ArtPiece
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtPiece we want to update
     *   }
     * })
    **/
    upsert<T extends ArtPieceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ArtPieceUpsertArgs<ExtArgs>>
    ): Prisma__ArtPieceClient<$Result.GetResult<Prisma.$ArtPiecePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ArtPieces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtPieceCountArgs} args - Arguments to filter ArtPieces to count.
     * @example
     * // Count the number of ArtPieces
     * const count = await prisma.artPiece.count({
     *   where: {
     *     // ... the filter for the ArtPieces we want to count
     *   }
     * })
    **/
    count<T extends ArtPieceCountArgs>(
      args?: Subset<T, ArtPieceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtPieceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtPiece.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtPieceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtPieceAggregateArgs>(args: Subset<T, ArtPieceAggregateArgs>): Prisma.PrismaPromise<GetArtPieceAggregateType<T>>

    /**
     * Group by ArtPiece.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtPieceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtPieceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtPieceGroupByArgs['orderBy'] }
        : { orderBy?: ArtPieceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtPieceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtPieceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArtPiece model
   */
  readonly fields: ArtPieceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArtPiece.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtPieceClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    artist<T extends ArtistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArtistDefaultArgs<ExtArgs>>): Prisma__ArtistClient<$Result.GetResult<Prisma.$ArtistPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    curator<T extends CuratorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CuratorDefaultArgs<ExtArgs>>): Prisma__CuratorClient<$Result.GetResult<Prisma.$CuratorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ArtPiece model
   */ 
  interface ArtPieceFieldRefs {
    readonly id: FieldRef<"ArtPiece", 'String'>
    readonly title: FieldRef<"ArtPiece", 'String'>
    readonly imgUrl: FieldRef<"ArtPiece", 'String'>
    readonly year: FieldRef<"ArtPiece", 'Int'>
    readonly price: FieldRef<"ArtPiece", 'Float'>
    readonly estimate: FieldRef<"ArtPiece", 'Float'>
    readonly artistId: FieldRef<"ArtPiece", 'String'>
    readonly curatorId: FieldRef<"ArtPiece", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ArtPiece findUnique
   */
  export type ArtPieceFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
    /**
     * Filter, which ArtPiece to fetch.
     */
    where: ArtPieceWhereUniqueInput
  }


  /**
   * ArtPiece findUniqueOrThrow
   */
  export type ArtPieceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
    /**
     * Filter, which ArtPiece to fetch.
     */
    where: ArtPieceWhereUniqueInput
  }


  /**
   * ArtPiece findFirst
   */
  export type ArtPieceFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
    /**
     * Filter, which ArtPiece to fetch.
     */
    where?: ArtPieceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtPieces to fetch.
     */
    orderBy?: ArtPieceOrderByWithRelationInput | ArtPieceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtPieces.
     */
    cursor?: ArtPieceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtPieces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtPieces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtPieces.
     */
    distinct?: ArtPieceScalarFieldEnum | ArtPieceScalarFieldEnum[]
  }


  /**
   * ArtPiece findFirstOrThrow
   */
  export type ArtPieceFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
    /**
     * Filter, which ArtPiece to fetch.
     */
    where?: ArtPieceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtPieces to fetch.
     */
    orderBy?: ArtPieceOrderByWithRelationInput | ArtPieceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtPieces.
     */
    cursor?: ArtPieceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtPieces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtPieces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtPieces.
     */
    distinct?: ArtPieceScalarFieldEnum | ArtPieceScalarFieldEnum[]
  }


  /**
   * ArtPiece findMany
   */
  export type ArtPieceFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
    /**
     * Filter, which ArtPieces to fetch.
     */
    where?: ArtPieceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtPieces to fetch.
     */
    orderBy?: ArtPieceOrderByWithRelationInput | ArtPieceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArtPieces.
     */
    cursor?: ArtPieceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtPieces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtPieces.
     */
    skip?: number
    distinct?: ArtPieceScalarFieldEnum | ArtPieceScalarFieldEnum[]
  }


  /**
   * ArtPiece create
   */
  export type ArtPieceCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
    /**
     * The data needed to create a ArtPiece.
     */
    data: XOR<ArtPieceCreateInput, ArtPieceUncheckedCreateInput>
  }


  /**
   * ArtPiece createMany
   */
  export type ArtPieceCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArtPieces.
     */
    data: ArtPieceCreateManyInput | ArtPieceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ArtPiece update
   */
  export type ArtPieceUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
    /**
     * The data needed to update a ArtPiece.
     */
    data: XOR<ArtPieceUpdateInput, ArtPieceUncheckedUpdateInput>
    /**
     * Choose, which ArtPiece to update.
     */
    where: ArtPieceWhereUniqueInput
  }


  /**
   * ArtPiece updateMany
   */
  export type ArtPieceUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArtPieces.
     */
    data: XOR<ArtPieceUpdateManyMutationInput, ArtPieceUncheckedUpdateManyInput>
    /**
     * Filter which ArtPieces to update
     */
    where?: ArtPieceWhereInput
  }


  /**
   * ArtPiece upsert
   */
  export type ArtPieceUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
    /**
     * The filter to search for the ArtPiece to update in case it exists.
     */
    where: ArtPieceWhereUniqueInput
    /**
     * In case the ArtPiece found by the `where` argument doesn't exist, create a new ArtPiece with this data.
     */
    create: XOR<ArtPieceCreateInput, ArtPieceUncheckedCreateInput>
    /**
     * In case the ArtPiece was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtPieceUpdateInput, ArtPieceUncheckedUpdateInput>
  }


  /**
   * ArtPiece delete
   */
  export type ArtPieceDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
    /**
     * Filter which ArtPiece to delete.
     */
    where: ArtPieceWhereUniqueInput
  }


  /**
   * ArtPiece deleteMany
   */
  export type ArtPieceDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtPieces to delete
     */
    where?: ArtPieceWhereInput
  }


  /**
   * ArtPiece without action
   */
  export type ArtPieceDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtPiece
     */
    select?: ArtPieceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArtPieceInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CuratorScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    email: 'email',
    artPiece: 'artPiece'
  };

  export type CuratorScalarFieldEnum = (typeof CuratorScalarFieldEnum)[keyof typeof CuratorScalarFieldEnum]


  export const ArtistScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    email: 'email',
    artPiece: 'artPiece'
  };

  export type ArtistScalarFieldEnum = (typeof ArtistScalarFieldEnum)[keyof typeof ArtistScalarFieldEnum]


  export const ArtPieceScalarFieldEnum: {
    id: 'id',
    title: 'title',
    imgUrl: 'imgUrl',
    year: 'year',
    price: 'price',
    estimate: 'estimate',
    artistId: 'artistId',
    curatorId: 'curatorId'
  };

  export type ArtPieceScalarFieldEnum = (typeof ArtPieceScalarFieldEnum)[keyof typeof ArtPieceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CuratorWhereInput = {
    AND?: CuratorWhereInput | CuratorWhereInput[]
    OR?: CuratorWhereInput[]
    NOT?: CuratorWhereInput | CuratorWhereInput[]
    id?: StringFilter<"Curator"> | string
    firstName?: StringFilter<"Curator"> | string
    lastName?: StringFilter<"Curator"> | string
    phone?: StringFilter<"Curator"> | string
    email?: StringFilter<"Curator"> | string
    artPiece?: StringFilter<"Curator"> | string
    artPieces?: ArtPieceListRelationFilter
  }

  export type CuratorOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    artPiece?: SortOrder
    artPieces?: ArtPieceOrderByRelationAggregateInput
  }

  export type CuratorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CuratorWhereInput | CuratorWhereInput[]
    OR?: CuratorWhereInput[]
    NOT?: CuratorWhereInput | CuratorWhereInput[]
    firstName?: StringFilter<"Curator"> | string
    lastName?: StringFilter<"Curator"> | string
    phone?: StringFilter<"Curator"> | string
    email?: StringFilter<"Curator"> | string
    artPiece?: StringFilter<"Curator"> | string
    artPieces?: ArtPieceListRelationFilter
  }, "id">

  export type CuratorOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    artPiece?: SortOrder
    _count?: CuratorCountOrderByAggregateInput
    _max?: CuratorMaxOrderByAggregateInput
    _min?: CuratorMinOrderByAggregateInput
  }

  export type CuratorScalarWhereWithAggregatesInput = {
    AND?: CuratorScalarWhereWithAggregatesInput | CuratorScalarWhereWithAggregatesInput[]
    OR?: CuratorScalarWhereWithAggregatesInput[]
    NOT?: CuratorScalarWhereWithAggregatesInput | CuratorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Curator"> | string
    firstName?: StringWithAggregatesFilter<"Curator"> | string
    lastName?: StringWithAggregatesFilter<"Curator"> | string
    phone?: StringWithAggregatesFilter<"Curator"> | string
    email?: StringWithAggregatesFilter<"Curator"> | string
    artPiece?: StringWithAggregatesFilter<"Curator"> | string
  }

  export type ArtistWhereInput = {
    AND?: ArtistWhereInput | ArtistWhereInput[]
    OR?: ArtistWhereInput[]
    NOT?: ArtistWhereInput | ArtistWhereInput[]
    id?: StringFilter<"Artist"> | string
    firstName?: StringFilter<"Artist"> | string
    lastName?: StringFilter<"Artist"> | string
    phone?: StringFilter<"Artist"> | string
    email?: StringFilter<"Artist"> | string
    artPiece?: StringFilter<"Artist"> | string
    artPieces?: ArtPieceListRelationFilter
  }

  export type ArtistOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    artPiece?: SortOrder
    artPieces?: ArtPieceOrderByRelationAggregateInput
  }

  export type ArtistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ArtistWhereInput | ArtistWhereInput[]
    OR?: ArtistWhereInput[]
    NOT?: ArtistWhereInput | ArtistWhereInput[]
    firstName?: StringFilter<"Artist"> | string
    lastName?: StringFilter<"Artist"> | string
    phone?: StringFilter<"Artist"> | string
    email?: StringFilter<"Artist"> | string
    artPiece?: StringFilter<"Artist"> | string
    artPieces?: ArtPieceListRelationFilter
  }, "id">

  export type ArtistOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    artPiece?: SortOrder
    _count?: ArtistCountOrderByAggregateInput
    _max?: ArtistMaxOrderByAggregateInput
    _min?: ArtistMinOrderByAggregateInput
  }

  export type ArtistScalarWhereWithAggregatesInput = {
    AND?: ArtistScalarWhereWithAggregatesInput | ArtistScalarWhereWithAggregatesInput[]
    OR?: ArtistScalarWhereWithAggregatesInput[]
    NOT?: ArtistScalarWhereWithAggregatesInput | ArtistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Artist"> | string
    firstName?: StringWithAggregatesFilter<"Artist"> | string
    lastName?: StringWithAggregatesFilter<"Artist"> | string
    phone?: StringWithAggregatesFilter<"Artist"> | string
    email?: StringWithAggregatesFilter<"Artist"> | string
    artPiece?: StringWithAggregatesFilter<"Artist"> | string
  }

  export type ArtPieceWhereInput = {
    AND?: ArtPieceWhereInput | ArtPieceWhereInput[]
    OR?: ArtPieceWhereInput[]
    NOT?: ArtPieceWhereInput | ArtPieceWhereInput[]
    id?: StringFilter<"ArtPiece"> | string
    title?: StringFilter<"ArtPiece"> | string
    imgUrl?: StringFilter<"ArtPiece"> | string
    year?: IntFilter<"ArtPiece"> | number
    price?: FloatFilter<"ArtPiece"> | number
    estimate?: FloatFilter<"ArtPiece"> | number
    artistId?: StringFilter<"ArtPiece"> | string
    curatorId?: StringFilter<"ArtPiece"> | string
    artist?: XOR<ArtistRelationFilter, ArtistWhereInput>
    curator?: XOR<CuratorRelationFilter, CuratorWhereInput>
  }

  export type ArtPieceOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    imgUrl?: SortOrder
    year?: SortOrder
    price?: SortOrder
    estimate?: SortOrder
    artistId?: SortOrder
    curatorId?: SortOrder
    artist?: ArtistOrderByWithRelationInput
    curator?: CuratorOrderByWithRelationInput
  }

  export type ArtPieceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ArtPieceWhereInput | ArtPieceWhereInput[]
    OR?: ArtPieceWhereInput[]
    NOT?: ArtPieceWhereInput | ArtPieceWhereInput[]
    title?: StringFilter<"ArtPiece"> | string
    imgUrl?: StringFilter<"ArtPiece"> | string
    year?: IntFilter<"ArtPiece"> | number
    price?: FloatFilter<"ArtPiece"> | number
    estimate?: FloatFilter<"ArtPiece"> | number
    artistId?: StringFilter<"ArtPiece"> | string
    curatorId?: StringFilter<"ArtPiece"> | string
    artist?: XOR<ArtistRelationFilter, ArtistWhereInput>
    curator?: XOR<CuratorRelationFilter, CuratorWhereInput>
  }, "id">

  export type ArtPieceOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    imgUrl?: SortOrder
    year?: SortOrder
    price?: SortOrder
    estimate?: SortOrder
    artistId?: SortOrder
    curatorId?: SortOrder
    _count?: ArtPieceCountOrderByAggregateInput
    _avg?: ArtPieceAvgOrderByAggregateInput
    _max?: ArtPieceMaxOrderByAggregateInput
    _min?: ArtPieceMinOrderByAggregateInput
    _sum?: ArtPieceSumOrderByAggregateInput
  }

  export type ArtPieceScalarWhereWithAggregatesInput = {
    AND?: ArtPieceScalarWhereWithAggregatesInput | ArtPieceScalarWhereWithAggregatesInput[]
    OR?: ArtPieceScalarWhereWithAggregatesInput[]
    NOT?: ArtPieceScalarWhereWithAggregatesInput | ArtPieceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ArtPiece"> | string
    title?: StringWithAggregatesFilter<"ArtPiece"> | string
    imgUrl?: StringWithAggregatesFilter<"ArtPiece"> | string
    year?: IntWithAggregatesFilter<"ArtPiece"> | number
    price?: FloatWithAggregatesFilter<"ArtPiece"> | number
    estimate?: FloatWithAggregatesFilter<"ArtPiece"> | number
    artistId?: StringWithAggregatesFilter<"ArtPiece"> | string
    curatorId?: StringWithAggregatesFilter<"ArtPiece"> | string
  }

  export type CuratorCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece?: string
    artPieces?: ArtPieceCreateNestedManyWithoutCuratorInput
  }

  export type CuratorUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece?: string
    artPieces?: ArtPieceUncheckedCreateNestedManyWithoutCuratorInput
  }

  export type CuratorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
    artPieces?: ArtPieceUpdateManyWithoutCuratorNestedInput
  }

  export type CuratorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
    artPieces?: ArtPieceUncheckedUpdateManyWithoutCuratorNestedInput
  }

  export type CuratorCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece?: string
  }

  export type CuratorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
  }

  export type CuratorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
  }

  export type ArtistCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece?: string
    artPieces?: ArtPieceCreateNestedManyWithoutArtistInput
  }

  export type ArtistUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece?: string
    artPieces?: ArtPieceUncheckedCreateNestedManyWithoutArtistInput
  }

  export type ArtistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
    artPieces?: ArtPieceUpdateManyWithoutArtistNestedInput
  }

  export type ArtistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
    artPieces?: ArtPieceUncheckedUpdateManyWithoutArtistNestedInput
  }

  export type ArtistCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece?: string
  }

  export type ArtistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
  }

  export type ArtistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
  }

  export type ArtPieceCreateInput = {
    id?: string
    title: string
    imgUrl: string
    year: number
    price: number
    estimate: number
    artist: ArtistCreateNestedOneWithoutArtPiecesInput
    curator: CuratorCreateNestedOneWithoutArtPiecesInput
  }

  export type ArtPieceUncheckedCreateInput = {
    id?: string
    title: string
    imgUrl: string
    year: number
    price: number
    estimate: number
    artistId: string
    curatorId: string
  }

  export type ArtPieceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    estimate?: FloatFieldUpdateOperationsInput | number
    artist?: ArtistUpdateOneRequiredWithoutArtPiecesNestedInput
    curator?: CuratorUpdateOneRequiredWithoutArtPiecesNestedInput
  }

  export type ArtPieceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    estimate?: FloatFieldUpdateOperationsInput | number
    artistId?: StringFieldUpdateOperationsInput | string
    curatorId?: StringFieldUpdateOperationsInput | string
  }

  export type ArtPieceCreateManyInput = {
    id?: string
    title: string
    imgUrl: string
    year: number
    price: number
    estimate: number
    artistId: string
    curatorId: string
  }

  export type ArtPieceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    estimate?: FloatFieldUpdateOperationsInput | number
  }

  export type ArtPieceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    estimate?: FloatFieldUpdateOperationsInput | number
    artistId?: StringFieldUpdateOperationsInput | string
    curatorId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ArtPieceListRelationFilter = {
    every?: ArtPieceWhereInput
    some?: ArtPieceWhereInput
    none?: ArtPieceWhereInput
  }

  export type ArtPieceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CuratorCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    artPiece?: SortOrder
  }

  export type CuratorMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    artPiece?: SortOrder
  }

  export type CuratorMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    artPiece?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ArtistCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    artPiece?: SortOrder
  }

  export type ArtistMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    artPiece?: SortOrder
  }

  export type ArtistMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    artPiece?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ArtistRelationFilter = {
    is?: ArtistWhereInput
    isNot?: ArtistWhereInput
  }

  export type CuratorRelationFilter = {
    is?: CuratorWhereInput
    isNot?: CuratorWhereInput
  }

  export type ArtPieceCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imgUrl?: SortOrder
    year?: SortOrder
    price?: SortOrder
    estimate?: SortOrder
    artistId?: SortOrder
    curatorId?: SortOrder
  }

  export type ArtPieceAvgOrderByAggregateInput = {
    year?: SortOrder
    price?: SortOrder
    estimate?: SortOrder
  }

  export type ArtPieceMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imgUrl?: SortOrder
    year?: SortOrder
    price?: SortOrder
    estimate?: SortOrder
    artistId?: SortOrder
    curatorId?: SortOrder
  }

  export type ArtPieceMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imgUrl?: SortOrder
    year?: SortOrder
    price?: SortOrder
    estimate?: SortOrder
    artistId?: SortOrder
    curatorId?: SortOrder
  }

  export type ArtPieceSumOrderByAggregateInput = {
    year?: SortOrder
    price?: SortOrder
    estimate?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ArtPieceCreateNestedManyWithoutCuratorInput = {
    create?: XOR<ArtPieceCreateWithoutCuratorInput, ArtPieceUncheckedCreateWithoutCuratorInput> | ArtPieceCreateWithoutCuratorInput[] | ArtPieceUncheckedCreateWithoutCuratorInput[]
    connectOrCreate?: ArtPieceCreateOrConnectWithoutCuratorInput | ArtPieceCreateOrConnectWithoutCuratorInput[]
    createMany?: ArtPieceCreateManyCuratorInputEnvelope
    connect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
  }

  export type ArtPieceUncheckedCreateNestedManyWithoutCuratorInput = {
    create?: XOR<ArtPieceCreateWithoutCuratorInput, ArtPieceUncheckedCreateWithoutCuratorInput> | ArtPieceCreateWithoutCuratorInput[] | ArtPieceUncheckedCreateWithoutCuratorInput[]
    connectOrCreate?: ArtPieceCreateOrConnectWithoutCuratorInput | ArtPieceCreateOrConnectWithoutCuratorInput[]
    createMany?: ArtPieceCreateManyCuratorInputEnvelope
    connect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ArtPieceUpdateManyWithoutCuratorNestedInput = {
    create?: XOR<ArtPieceCreateWithoutCuratorInput, ArtPieceUncheckedCreateWithoutCuratorInput> | ArtPieceCreateWithoutCuratorInput[] | ArtPieceUncheckedCreateWithoutCuratorInput[]
    connectOrCreate?: ArtPieceCreateOrConnectWithoutCuratorInput | ArtPieceCreateOrConnectWithoutCuratorInput[]
    upsert?: ArtPieceUpsertWithWhereUniqueWithoutCuratorInput | ArtPieceUpsertWithWhereUniqueWithoutCuratorInput[]
    createMany?: ArtPieceCreateManyCuratorInputEnvelope
    set?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    disconnect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    delete?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    connect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    update?: ArtPieceUpdateWithWhereUniqueWithoutCuratorInput | ArtPieceUpdateWithWhereUniqueWithoutCuratorInput[]
    updateMany?: ArtPieceUpdateManyWithWhereWithoutCuratorInput | ArtPieceUpdateManyWithWhereWithoutCuratorInput[]
    deleteMany?: ArtPieceScalarWhereInput | ArtPieceScalarWhereInput[]
  }

  export type ArtPieceUncheckedUpdateManyWithoutCuratorNestedInput = {
    create?: XOR<ArtPieceCreateWithoutCuratorInput, ArtPieceUncheckedCreateWithoutCuratorInput> | ArtPieceCreateWithoutCuratorInput[] | ArtPieceUncheckedCreateWithoutCuratorInput[]
    connectOrCreate?: ArtPieceCreateOrConnectWithoutCuratorInput | ArtPieceCreateOrConnectWithoutCuratorInput[]
    upsert?: ArtPieceUpsertWithWhereUniqueWithoutCuratorInput | ArtPieceUpsertWithWhereUniqueWithoutCuratorInput[]
    createMany?: ArtPieceCreateManyCuratorInputEnvelope
    set?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    disconnect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    delete?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    connect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    update?: ArtPieceUpdateWithWhereUniqueWithoutCuratorInput | ArtPieceUpdateWithWhereUniqueWithoutCuratorInput[]
    updateMany?: ArtPieceUpdateManyWithWhereWithoutCuratorInput | ArtPieceUpdateManyWithWhereWithoutCuratorInput[]
    deleteMany?: ArtPieceScalarWhereInput | ArtPieceScalarWhereInput[]
  }

  export type ArtPieceCreateNestedManyWithoutArtistInput = {
    create?: XOR<ArtPieceCreateWithoutArtistInput, ArtPieceUncheckedCreateWithoutArtistInput> | ArtPieceCreateWithoutArtistInput[] | ArtPieceUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: ArtPieceCreateOrConnectWithoutArtistInput | ArtPieceCreateOrConnectWithoutArtistInput[]
    createMany?: ArtPieceCreateManyArtistInputEnvelope
    connect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
  }

  export type ArtPieceUncheckedCreateNestedManyWithoutArtistInput = {
    create?: XOR<ArtPieceCreateWithoutArtistInput, ArtPieceUncheckedCreateWithoutArtistInput> | ArtPieceCreateWithoutArtistInput[] | ArtPieceUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: ArtPieceCreateOrConnectWithoutArtistInput | ArtPieceCreateOrConnectWithoutArtistInput[]
    createMany?: ArtPieceCreateManyArtistInputEnvelope
    connect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
  }

  export type ArtPieceUpdateManyWithoutArtistNestedInput = {
    create?: XOR<ArtPieceCreateWithoutArtistInput, ArtPieceUncheckedCreateWithoutArtistInput> | ArtPieceCreateWithoutArtistInput[] | ArtPieceUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: ArtPieceCreateOrConnectWithoutArtistInput | ArtPieceCreateOrConnectWithoutArtistInput[]
    upsert?: ArtPieceUpsertWithWhereUniqueWithoutArtistInput | ArtPieceUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: ArtPieceCreateManyArtistInputEnvelope
    set?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    disconnect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    delete?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    connect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    update?: ArtPieceUpdateWithWhereUniqueWithoutArtistInput | ArtPieceUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: ArtPieceUpdateManyWithWhereWithoutArtistInput | ArtPieceUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: ArtPieceScalarWhereInput | ArtPieceScalarWhereInput[]
  }

  export type ArtPieceUncheckedUpdateManyWithoutArtistNestedInput = {
    create?: XOR<ArtPieceCreateWithoutArtistInput, ArtPieceUncheckedCreateWithoutArtistInput> | ArtPieceCreateWithoutArtistInput[] | ArtPieceUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: ArtPieceCreateOrConnectWithoutArtistInput | ArtPieceCreateOrConnectWithoutArtistInput[]
    upsert?: ArtPieceUpsertWithWhereUniqueWithoutArtistInput | ArtPieceUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: ArtPieceCreateManyArtistInputEnvelope
    set?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    disconnect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    delete?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    connect?: ArtPieceWhereUniqueInput | ArtPieceWhereUniqueInput[]
    update?: ArtPieceUpdateWithWhereUniqueWithoutArtistInput | ArtPieceUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: ArtPieceUpdateManyWithWhereWithoutArtistInput | ArtPieceUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: ArtPieceScalarWhereInput | ArtPieceScalarWhereInput[]
  }

  export type ArtistCreateNestedOneWithoutArtPiecesInput = {
    create?: XOR<ArtistCreateWithoutArtPiecesInput, ArtistUncheckedCreateWithoutArtPiecesInput>
    connectOrCreate?: ArtistCreateOrConnectWithoutArtPiecesInput
    connect?: ArtistWhereUniqueInput
  }

  export type CuratorCreateNestedOneWithoutArtPiecesInput = {
    create?: XOR<CuratorCreateWithoutArtPiecesInput, CuratorUncheckedCreateWithoutArtPiecesInput>
    connectOrCreate?: CuratorCreateOrConnectWithoutArtPiecesInput
    connect?: CuratorWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ArtistUpdateOneRequiredWithoutArtPiecesNestedInput = {
    create?: XOR<ArtistCreateWithoutArtPiecesInput, ArtistUncheckedCreateWithoutArtPiecesInput>
    connectOrCreate?: ArtistCreateOrConnectWithoutArtPiecesInput
    upsert?: ArtistUpsertWithoutArtPiecesInput
    connect?: ArtistWhereUniqueInput
    update?: XOR<XOR<ArtistUpdateToOneWithWhereWithoutArtPiecesInput, ArtistUpdateWithoutArtPiecesInput>, ArtistUncheckedUpdateWithoutArtPiecesInput>
  }

  export type CuratorUpdateOneRequiredWithoutArtPiecesNestedInput = {
    create?: XOR<CuratorCreateWithoutArtPiecesInput, CuratorUncheckedCreateWithoutArtPiecesInput>
    connectOrCreate?: CuratorCreateOrConnectWithoutArtPiecesInput
    upsert?: CuratorUpsertWithoutArtPiecesInput
    connect?: CuratorWhereUniqueInput
    update?: XOR<XOR<CuratorUpdateToOneWithWhereWithoutArtPiecesInput, CuratorUpdateWithoutArtPiecesInput>, CuratorUncheckedUpdateWithoutArtPiecesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ArtPieceCreateWithoutCuratorInput = {
    id?: string
    title: string
    imgUrl: string
    year: number
    price: number
    estimate: number
    artist: ArtistCreateNestedOneWithoutArtPiecesInput
  }

  export type ArtPieceUncheckedCreateWithoutCuratorInput = {
    id?: string
    title: string
    imgUrl: string
    year: number
    price: number
    estimate: number
    artistId: string
  }

  export type ArtPieceCreateOrConnectWithoutCuratorInput = {
    where: ArtPieceWhereUniqueInput
    create: XOR<ArtPieceCreateWithoutCuratorInput, ArtPieceUncheckedCreateWithoutCuratorInput>
  }

  export type ArtPieceCreateManyCuratorInputEnvelope = {
    data: ArtPieceCreateManyCuratorInput | ArtPieceCreateManyCuratorInput[]
    skipDuplicates?: boolean
  }

  export type ArtPieceUpsertWithWhereUniqueWithoutCuratorInput = {
    where: ArtPieceWhereUniqueInput
    update: XOR<ArtPieceUpdateWithoutCuratorInput, ArtPieceUncheckedUpdateWithoutCuratorInput>
    create: XOR<ArtPieceCreateWithoutCuratorInput, ArtPieceUncheckedCreateWithoutCuratorInput>
  }

  export type ArtPieceUpdateWithWhereUniqueWithoutCuratorInput = {
    where: ArtPieceWhereUniqueInput
    data: XOR<ArtPieceUpdateWithoutCuratorInput, ArtPieceUncheckedUpdateWithoutCuratorInput>
  }

  export type ArtPieceUpdateManyWithWhereWithoutCuratorInput = {
    where: ArtPieceScalarWhereInput
    data: XOR<ArtPieceUpdateManyMutationInput, ArtPieceUncheckedUpdateManyWithoutCuratorInput>
  }

  export type ArtPieceScalarWhereInput = {
    AND?: ArtPieceScalarWhereInput | ArtPieceScalarWhereInput[]
    OR?: ArtPieceScalarWhereInput[]
    NOT?: ArtPieceScalarWhereInput | ArtPieceScalarWhereInput[]
    id?: StringFilter<"ArtPiece"> | string
    title?: StringFilter<"ArtPiece"> | string
    imgUrl?: StringFilter<"ArtPiece"> | string
    year?: IntFilter<"ArtPiece"> | number
    price?: FloatFilter<"ArtPiece"> | number
    estimate?: FloatFilter<"ArtPiece"> | number
    artistId?: StringFilter<"ArtPiece"> | string
    curatorId?: StringFilter<"ArtPiece"> | string
  }

  export type ArtPieceCreateWithoutArtistInput = {
    id?: string
    title: string
    imgUrl: string
    year: number
    price: number
    estimate: number
    curator: CuratorCreateNestedOneWithoutArtPiecesInput
  }

  export type ArtPieceUncheckedCreateWithoutArtistInput = {
    id?: string
    title: string
    imgUrl: string
    year: number
    price: number
    estimate: number
    curatorId: string
  }

  export type ArtPieceCreateOrConnectWithoutArtistInput = {
    where: ArtPieceWhereUniqueInput
    create: XOR<ArtPieceCreateWithoutArtistInput, ArtPieceUncheckedCreateWithoutArtistInput>
  }

  export type ArtPieceCreateManyArtistInputEnvelope = {
    data: ArtPieceCreateManyArtistInput | ArtPieceCreateManyArtistInput[]
    skipDuplicates?: boolean
  }

  export type ArtPieceUpsertWithWhereUniqueWithoutArtistInput = {
    where: ArtPieceWhereUniqueInput
    update: XOR<ArtPieceUpdateWithoutArtistInput, ArtPieceUncheckedUpdateWithoutArtistInput>
    create: XOR<ArtPieceCreateWithoutArtistInput, ArtPieceUncheckedCreateWithoutArtistInput>
  }

  export type ArtPieceUpdateWithWhereUniqueWithoutArtistInput = {
    where: ArtPieceWhereUniqueInput
    data: XOR<ArtPieceUpdateWithoutArtistInput, ArtPieceUncheckedUpdateWithoutArtistInput>
  }

  export type ArtPieceUpdateManyWithWhereWithoutArtistInput = {
    where: ArtPieceScalarWhereInput
    data: XOR<ArtPieceUpdateManyMutationInput, ArtPieceUncheckedUpdateManyWithoutArtistInput>
  }

  export type ArtistCreateWithoutArtPiecesInput = {
    id?: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece?: string
  }

  export type ArtistUncheckedCreateWithoutArtPiecesInput = {
    id?: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece?: string
  }

  export type ArtistCreateOrConnectWithoutArtPiecesInput = {
    where: ArtistWhereUniqueInput
    create: XOR<ArtistCreateWithoutArtPiecesInput, ArtistUncheckedCreateWithoutArtPiecesInput>
  }

  export type CuratorCreateWithoutArtPiecesInput = {
    id?: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece?: string
  }

  export type CuratorUncheckedCreateWithoutArtPiecesInput = {
    id?: string
    firstName: string
    lastName: string
    phone: string
    email: string
    artPiece?: string
  }

  export type CuratorCreateOrConnectWithoutArtPiecesInput = {
    where: CuratorWhereUniqueInput
    create: XOR<CuratorCreateWithoutArtPiecesInput, CuratorUncheckedCreateWithoutArtPiecesInput>
  }

  export type ArtistUpsertWithoutArtPiecesInput = {
    update: XOR<ArtistUpdateWithoutArtPiecesInput, ArtistUncheckedUpdateWithoutArtPiecesInput>
    create: XOR<ArtistCreateWithoutArtPiecesInput, ArtistUncheckedCreateWithoutArtPiecesInput>
    where?: ArtistWhereInput
  }

  export type ArtistUpdateToOneWithWhereWithoutArtPiecesInput = {
    where?: ArtistWhereInput
    data: XOR<ArtistUpdateWithoutArtPiecesInput, ArtistUncheckedUpdateWithoutArtPiecesInput>
  }

  export type ArtistUpdateWithoutArtPiecesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
  }

  export type ArtistUncheckedUpdateWithoutArtPiecesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
  }

  export type CuratorUpsertWithoutArtPiecesInput = {
    update: XOR<CuratorUpdateWithoutArtPiecesInput, CuratorUncheckedUpdateWithoutArtPiecesInput>
    create: XOR<CuratorCreateWithoutArtPiecesInput, CuratorUncheckedCreateWithoutArtPiecesInput>
    where?: CuratorWhereInput
  }

  export type CuratorUpdateToOneWithWhereWithoutArtPiecesInput = {
    where?: CuratorWhereInput
    data: XOR<CuratorUpdateWithoutArtPiecesInput, CuratorUncheckedUpdateWithoutArtPiecesInput>
  }

  export type CuratorUpdateWithoutArtPiecesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
  }

  export type CuratorUncheckedUpdateWithoutArtPiecesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    artPiece?: StringFieldUpdateOperationsInput | string
  }

  export type ArtPieceCreateManyCuratorInput = {
    id?: string
    title: string
    imgUrl: string
    year: number
    price: number
    estimate: number
    artistId: string
  }

  export type ArtPieceUpdateWithoutCuratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    estimate?: FloatFieldUpdateOperationsInput | number
    artist?: ArtistUpdateOneRequiredWithoutArtPiecesNestedInput
  }

  export type ArtPieceUncheckedUpdateWithoutCuratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    estimate?: FloatFieldUpdateOperationsInput | number
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type ArtPieceUncheckedUpdateManyWithoutCuratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    estimate?: FloatFieldUpdateOperationsInput | number
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type ArtPieceCreateManyArtistInput = {
    id?: string
    title: string
    imgUrl: string
    year: number
    price: number
    estimate: number
    curatorId: string
  }

  export type ArtPieceUpdateWithoutArtistInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    estimate?: FloatFieldUpdateOperationsInput | number
    curator?: CuratorUpdateOneRequiredWithoutArtPiecesNestedInput
  }

  export type ArtPieceUncheckedUpdateWithoutArtistInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    estimate?: FloatFieldUpdateOperationsInput | number
    curatorId?: StringFieldUpdateOperationsInput | string
  }

  export type ArtPieceUncheckedUpdateManyWithoutArtistInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    estimate?: FloatFieldUpdateOperationsInput | number
    curatorId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CuratorCountOutputTypeDefaultArgs instead
     */
    export type CuratorCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CuratorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtistCountOutputTypeDefaultArgs instead
     */
    export type ArtistCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ArtistCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CuratorDefaultArgs instead
     */
    export type CuratorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CuratorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtistDefaultArgs instead
     */
    export type ArtistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ArtistDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtPieceDefaultArgs instead
     */
    export type ArtPieceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ArtPieceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}